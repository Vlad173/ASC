In[690]:= f =11*x^2 - 2*x*y - 2*x*z + 2*y*z + 9*z^2 - 4*x + y + z;

In[691]:= TraditionalForm[f]

In[692]:= A ={
{11,-1,-1},
{-1,0,1},
{-1,1,9}
};

In[693]:= MatrixForm[A]

In[694]:= l=.
AE = A - IdentityMatrix[3] * l;
MatrixForm[AE]

In[697]:= myCharPoly = Det[AE]

In[698]:= wolframCharPoly = CharacteristicPolynomial[A, l]

In[699]:= FullSimplify[myCharPoly == wolframCharPoly]

In[700]:= sol = Solve[myCharPoly == 0, l];

In[701]:= myEigenVals = l /.sol;

In[702]:= % // N

In[703]:= wolframEigenVals = Eigenvalues[A];
Sort[wolframEigenVals] == Sort[myEigenVals]

In[705]:= X = {x, y, z};
one = AE /. l -> myEigenVals[[1]];
two = AE /. l -> myEigenVals[[2]];
three = AE /. l -> myEigenVals[[3]];
myOne = one.X 
myTwo = two.X 
myThree = three.X 

In[712]:= myEigenVec1 = Solve[myOne == 0 /.z ->1];
myEigenVec2 = Solve[myTwo == 0 /.z ->1];
myEigenVec3 = Solve[myThree == 0 /.z ->1];
myEigenVec1 = {x, y, 1} /. myEigenVec1[[1]]
myEigenVec2 = {x, y, 1} /. myEigenVec2[[1]]
myEigenVec3 = {x, y, 1} /. myEigenVec3[[1]]

In[718]:= wolframEigenSys = Eigensystem[A]

In[719]:= myEigenVals[[1]]
myEigenVals[[2]]
myEigenVals[[3]]

In[722]:= wolframEigenSys[[2,3]] == N[myEigenVec1] 
wolframEigenSys[[2, 2]] == N[myEigenVec2]
wolframEigenSys[[2,1]] == N[myEigenVec3]

In[725]:= S ={
Normalize[myEigenVec1],
Normalize[myEigenVec2],
Normalize[myEigenVec3]
};
N[S] // MatrixForm

In[727]:= a = {1, 1, 1};
a1 = Transpose[S].a;
N[a1] // MatrixForm
p = myEigenVals[[1]] * x1^2 + myEigenVals[[2]] * y1^2 + myEigenVals[[3]] * z^2 + 2 * a1[[1]] * x1 + 2 * a1[[2]] * y1 + 2 * a1[[3]] * z1 - 10;
p = FullSimplify[p];
N[p] // TraditionalForm
p /. {x1 ->x,y1->y,z1->z}

In[744]:= x =.; y=.;z=.;
fk[a_,b_,c_]:= p/.{x1->a,y1->b,z1->c}
ContourPlot3D[fk[x,y,z] == 0, {x, -50, 50},{y,-50,50},{z,-50,50}]

In[739]:= fnk[a_,b_,c_] :=f
ContourPlot3D[fnk[x,y,z] == 0, {x, -50, 50},{y,-50,50},{z,-50,50}]